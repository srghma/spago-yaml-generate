#!/usr/bin/env node

// find all dirs that start with have spago.yaml inside of them
//
// for each dir run `$HOME/projects/spago/bin/index.dev.js ls packages --json`
//
// parse json
//
// it should be like
//
// "deku-dom": {
//   "type": "workspace",
//   "value": {
//     "hasTests": false,
//     "package": {
//       "name": "deku-dom",
//       "dependencies": [
//         "deku-core",
//         "hyrule",
//         "web-html",
//         "web-pointerevents",
//         "web-touchevents",
//         "web-uievents"
//       ]
//     },
//     "path": "deku-dom"
//   }
// },
//
// get all [(name, path)] pairs like here ("deku-dom", "deku-dom")

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const YAML = require('yaml');

// Define the projects directory
const projectsDir = process.env.HOME + '/projects';
const spagoExePath = `${projectsDir}/spago/bin/index.dev.js`

// Helper function to check if a directory contains spago.yaml
function hasSpagoYaml(dir) {
  return fs.existsSync(path.join(dir, 'spago.yaml'));
}

// Helper function to run the command and parse the output
function getPackageInfo(dir) {
  try {
    const cmd = `${spagoExePath} ls packages --json`;
    const output = execSync(cmd, { cwd: dir, encoding: 'utf8' });
    return JSON.parse(output);
  } catch (error) {
    console.error(`Failed to run command in ${dir}:`, error.message);
    return null;
  }
}

// Traverse the projects directory to find directories with spago.yaml
const dirsWithSpagoYaml = fs.readdirSync(projectsDir)
  .map(name => path.join(projectsDir, name))
  .filter(fs.lstatSync)
  .filter(hasSpagoYaml);

function getWorkspacePackages(dir) {
  const packageInfo = getPackageInfo(dir);
  if (!packageInfo) {
    return [];
  }
  return Object.entries(packageInfo)
    .filter(([, details]) => details.type === 'workspace')
    .map(([name, details]) => [name, dir, details.value.path]);
}

const namePathPairs = dirsWithSpagoYaml.flatMap(getWorkspacePackages)

// Output the result
console.log(namePathPairs);

// for all namePathPairs
// generate yaml like
//
//   tldr:
//     path: dir
//     subdir: subdir # if present

const yamlData = {};

namePathPairs.forEach(([name, dir, subdir]) => {
  yamlData[name] = {
    // path: dir
    path: subdir === './' ? dir : path.join(dir, subdir)
  };
  // if (subdir) {
  //   yamlData[name].subdir = subdir;
  // }
});

// Convert the object to YAML format
const yamlOutput = YAML.stringify(yamlData);

// Output the YAML to console
// console.log(yamlData);
console.log(yamlOutput);

fs.writeFileSync(path.join(projectsDir, 'spago-myglobal.yaml'), yamlOutput, 'utf8');
